name: PR to main

on:
  pull_request:
    branches:
      - 'main'
    types:
      - closed  

jobs:
  backend_tests:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./requirements.txt 
    - name: Test with flake8 and django test
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 --ignore I001,I004 main/
        cd main/
        python manage.py test

  build_backend_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker 
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./
        push: true
        tags: teamoctopus/octopus_backend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: teamoctopus/octopus_gateway:latest   

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Copy docker-copmose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.prod.yml"
          target: "octopus"
      - name: Executing remote ssh command to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd octopus
            sudo docker-compose -f docker-compose.prod.yml pull
            sudo docker-compose -f docker-compose.prod.yml down
            sudo docker-compose -f docker-compose.prod.yml up -d
            sudo docker-compose -f docker-compose.prod.yml exec backend python manage.py makemigrations
            sudo docker-compose -f docker-compose.prod.yml exec backend python manage.py migrate
            sudo docker-compose -f docker-compose.prod.yml exec backend python manage.py collectstatic --noinput

  send_notification:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependences
      run: pip install requests argparse

    - name: Send custom message
      run: |
        python send_telegram_message.py \
        --bot_token "${{ secrets.TELEGRAM_TOKEN }}" \
        --chat_id "${{ secrets.TELEGRAM_TO }}" \
        --message_thread_id "${{ secrets.CHAT_THREAD }}" \
        --actor "${{ github.actor }}" \
        --message "${{ github.event.commits[0].message }}" \
        --repository "${{ github.repository }}" \
        --commit_url "https://github.com/${{ github.repository }}/commit/${{ github.sha }}" \
        --info "ðŸ‘Œ Deployment successfully completed!" \
        --pr_title "${{ github.event.pull_request.title }}" \
        --pr_number "${{ github.event.pull_request.number }}" \
        --pr_author "${{ github.event.pull_request.user.login }}" \
        --pr_base_branch "${{ github.event.pull_request.base.ref }}" \
        --pr_head_branch "${{ github.event.pull_request.head.ref }}" \
        --pr_url "${{ github.event.pull_request.html_url }}"